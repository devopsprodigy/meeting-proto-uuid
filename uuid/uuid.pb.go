// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uuid.proto

package uuid

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b0c78c62e9a4add, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Response struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Instance             string   `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b0c78c62e9a4add, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Response) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "meeting.uuid.proto.Request")
	proto.RegisterType((*Response)(nil), "meeting.uuid.proto.Response")
}

func init() { proto.RegisterFile("uuid.proto", fileDescriptor_2b0c78c62e9a4add) }

var fileDescriptor_2b0c78c62e9a4add = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0xcd, 0x4c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca, 0x4d, 0x4d, 0x2d, 0xc9, 0xcc, 0x4b, 0xd7,
	0x43, 0x88, 0x29, 0x71, 0x72, 0xb1, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x59, 0x71,
	0x71, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x71, 0xb1, 0x80, 0x14, 0x49,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0x52, 0x5c, 0x1c, 0x99, 0x79, 0xc5, 0x25,
	0x89, 0x79, 0xc9, 0xa9, 0x12, 0x4c, 0x60, 0x71, 0x38, 0xdf, 0x28, 0x80, 0x8b, 0xcb, 0x3d, 0xb5,
	0x24, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x89, 0x8b, 0x19, 0xc8, 0x13, 0x92, 0xd6,
	0xc3, 0xb4, 0x50, 0x0f, 0x6a, 0x9b, 0x94, 0x0c, 0x76, 0x49, 0x88, 0xfd, 0x4a, 0x0c, 0x4e, 0x6c,
	0x51, 0x60, 0x5b, 0x93, 0xd8, 0xc0, 0x32, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x8c,
	0x41, 0x3c, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetServiceClient is the client API for GetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetServiceClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type getServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetServiceClient(cc *grpc.ClientConn) GetServiceClient {
	return &getServiceClient{cc}
}

func (c *getServiceClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/meeting.uuid.proto.GetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetServiceServer is the server API for GetService service.
type GetServiceServer interface {
	Get(context.Context, *Request) (*Response, error)
}

// UnimplementedGetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetServiceServer struct {
}

func (*UnimplementedGetServiceServer) Get(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterGetServiceServer(s *grpc.Server, srv GetServiceServer) {
	s.RegisterService(&_GetService_serviceDesc, srv)
}

func _GetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meeting.uuid.proto.GetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServiceServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meeting.uuid.proto.GetService",
	HandlerType: (*GetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uuid.proto",
}
